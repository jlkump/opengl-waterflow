#version 430

layout(local_size_x=1, local_size_y=1, local_size_z=1) in; // One local worker per worker group

layout(r32i, binding = 0) uniform image2D particle_positions_x;
layout(r32i, binding = 1) uniform image2D particle_positions_y;
layout(r32i, binding = 2) uniform image2D particle_positions_z;
layout(r32i, binding = 3) uniform image2D particle_velocities_x;
layout(r32i, binding = 4) uniform image2D particle_velocities_y;
layout(r32i, binding = 5) uniform image2D particle_velocities_z;

uniform float delta_time;
uniform vec3 force;
uniform vec3 ws_lower_bound;
uniform vec3 ws_upper_bound;
uniform float texture_precision;

vec3 GetParticlePosition(ivec2 particle_id) {
    float x = ((float)imageLoad(particle_positions_x, particle_id).x) / texture_precision;
    float y = ((float)imageLoad(particle_positions_y, particle_id).x) / texture_precision;
    float z = ((float)imageLoad(particle_positions_z, particle_id).x) / texture_precision;
    return vec3(x, y, z);
}

vec3 GetParticleVelocity(ivec2 particle_id) {
    float x = ((float)imageLoad(particle_velocities_x, particle_id).x) / texture_precision;
    float y = ((float)imageLoad(particle_velocities_y, particle_id).x) / texture_precision;
    float z = ((float)imageLoad(particle_velocities_z, particle_id).x) / texture_precision;
    return vec3(x, y, z);
}

void SetParticlePosition(ivec2 pos_id, vec3 new_pos) {
	imageStore(particle_positions_x, pos_id, (int)(new_pos.x * texture_precision));
	imageStore(particle_positions_y, pos_id, (int)(new_pos.y * texture_precision));
	imageStore(particle_positions_z, pos_id, (int)(new_pos.z * texture_precision));
}

void SetParticleVelocity(ivec2 pos_id, vec3 new_vel) {
	imageStore(particle_velocities_x, pos_id, (int)(new_vel.x * texture_precision));
	imageStore(particle_velocities_y, pos_id, (int)(new_vel.y * texture_precision));
	imageStore(particle_velocities_z, pos_id, (int)(new_vel.z * texture_precision));
}

void main() {
    // Grab the position and velocity of the respective particle
    ivec2 particle_id = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec3 position = GetParticlePosition(particle_id);
    vec3 velocity = GetParticleVelocity(particle_id);

    // Apply the force to the particle
    vec3 new_velocity = velocity + delta_time * force;
    vec3 new_position = position + delta_time * new_velocity;

    // Make sure the particle is in bounds
    // (1) Lower-bound restriction
    if (new_position.x < ws_lower_bound.x) {
        new_position.x = ws_lower_bound.x;
    }
    if (new_position.y < ws_lower_bound.y) {
        new_position.y = ws_lower_bound.y;
    }
    if (new_position.z < ws_lower_bound.z) {
        new_position.z = ws_lower_bound.z;
    }

    // (2) Upper-bound restriction
    if (new_position.x > ws_upper_bound.x) {
        new_position.x = ws_upper_bound.x;
    }
    if (new_position.y > ws_upper_bound.y) {
        new_position.y = ws_upper_bound.y;
    }
    if (new_position.z > ws_upper_bound.z) {
        new_position.z = ws_upper_bound.z;
    }

    // Store the new position and velocity
    SetParticlePosition(particle_id, new_position);
    SetParticleVelocity(particle_id, new_velocity);
}
