#version 430

layout(local_size_x=1, local_size_y=1, local_size_z=1) in; // One local worker per worker group

layout(r32i, binding = 0) uniform iimage3D grid_velocities_x;
layout(r32i, binding = 1) uniform iimage3D grid_velocities_y;
layout(r32i, binding = 2) uniform iimage3D grid_velocities_z;
layout(r32ui, binding = 3) uniform uimage3D grid_count_x;
layout(r32ui, binding = 4) uniform uimage3D grid_count_y;
layout(r32ui, binding = 5) uniform uimage3D grid_count_z;
layout(r32ui, binding = 6) uniform uimage3D grid_is_fluid;
layout(r32ui, binding = 7) uniform uimage3D grid_cell_type; // 0 is solid, 1 is fluid, 2 is air

uniform sampler2D particle_positions_x;
uniform sampler2D particle_positions_y;
uniform sampler2D particle_positions_z;
uniform sampler2D particle_velocities_x;
uniform sampler2D particle_velocities_y;
uniform sampler2D particle_velocities_z;

// layout(r32i, binding = 8) uniform image2D particle_positions_x;
// layout(r32i, binding = 9) uniform image2D particle_positions_y;
// layout(r32i, binding = 10) uniform image2D particle_positions_z;
// layout(r32i, binding = 11) uniform image2D particle_velocities_x;
// layout(r32i, binding = 12) uniform image2D particle_velocities_y;
// layout(r32i, binding = 13) uniform image2D particle_velocities_z;

uniform uint grid_dim;
uniform float ws_grid_interval;
uniform vec3 ws_lower_bound;
uniform vec3 ws_upper_bound;
uniform float texture_precision;

void SetVelocityIn3DGridCell(ivec3 grid_id, vec3 new_vel, int component) {
    imageAtomicAdd(grid_velocities_x, grid_id, int(new_vel.x * texture_precision));
    imageAtomicAdd(grid_velocities_y, grid_id, int(new_vel.y * texture_precision));
    imageAtomicAdd(grid_velocities_z, grid_id, int(new_vel.z * texture_precision));
    
    // Add particle count of respective cell
    switch (component) {
    case 0:
        imageAtomicAdd(grid_count_x, grid_id, uint(1));
        break;
    case 1:
        imageAtomicAdd(grid_count_y, grid_id, uint(1));
        break;
    case 2:
        imageAtomicAdd(grid_count_z, grid_id, uint(1));
        break;
    }
}

vec3 GetParticlePosition(ivec2 particle_id) {
    float x = (float(texture(particle_positions_x, particle_id).x)) / texture_precision;
    float y = (float(texture(particle_positions_y, particle_id).x)) / texture_precision;
    float z = (float(texture(particle_positions_z, particle_id).x)) / texture_precision;
    return vec3(x, y, z);
}

vec3 GetParticleVelocity(ivec2 particle_id) {
    // NOTE: b/c we are now using texture samplers rather than image2D, we might need to convert the particle_id from texture
    // space coordinates on the range [0, texture_dimension] to normalized UVs on the range [0, 1]
    float x = (float(texture(particle_velocities_x, particle_id).x)) / texture_precision;
    float y = (float(texture(particle_velocities_y, particle_id).x)) / texture_precision;
    float z = (float(texture(particle_velocities_z, particle_id).x)) / texture_precision;
    return vec3(x, y, z);
}

vec3 GetGridOffset(int component) {
    vec3 delta = vec3(0.0);

    switch (component) {
    case 0: // x
        delta.y = ws_grid_interval * 0.5;
        delta.z = ws_grid_interval * 0.5;
        break;
    case 1: // y
        delta.x = ws_grid_interval * 0.5;
        delta.z = ws_grid_interval * 0.5;
        break;
    case 2: // z
        delta.x = ws_grid_interval * 0.5;
        delta.y = ws_grid_interval * 0.5;
        break;
    }

    return delta;
}

vec3 GetWorldSpaceVelocity(int component, vec3 vel) {
    switch (component) {
    case 0:
        vel.z = 0.0f;
        vel.y = 0.0f;
        break;
    case 1:
        vel.x = 0.0f;
        vel.z = 0.0f;
        break;
    case 2:
        vel.y = 0.0f;
        vel.x = 0.0f;
        break;
    }

    return vel;
}

void main() {
    // Get particle data
    ivec2 particle_id = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec3 position = GetParticlePosition(particle_id);
    vec3 velocity = GetParticleVelocity(particle_id);

    // Find the cell with the particle

    // TODO: Update fluid


    // TODO: density
    // Compute the new grid velocity and density by component
    // Denote components x=0, y=1, z=2
    float one_over_ws_interval = 1.0 / ws_grid_interval;
    for (int component = 0; component < 3; ++component) {

        // Determine the offset with respect to component's direction
        vec3 delta = GetGridOffset(component);

        vec3 ws_pos = vec3(0.0);
        ws_pos.x = clamp(
            position.x - ws_lower_bound.x, 
            ws_upper_bound.x - ws_lower_bound.x, 
            ws_grid_interval
        );
        ws_pos.y = clamp(
            position.y - ws_lower_bound.y, 
            ws_upper_bound.y - ws_lower_bound.y, 
            ws_grid_interval
        );
        ws_pos.z = clamp(
            position.z - ws_lower_bound.z, 
            ws_upper_bound.z - ws_lower_bound.z, 
            ws_grid_interval
        );

        uint x0 = min(uint(floor(ws_pos.x - delta.x * one_over_ws_interval)), grid_dim - 1);
        float tx = ((ws_pos.x - delta.x) - (float(x0)) * ws_grid_interval) * one_over_ws_interval;
        uint x1 = min(x0 + 1, grid_dim - 1);

        uint y0 = min(uint(floor(ws_pos.y - delta.y * one_over_ws_interval)), grid_dim - 1);
        float ty = ((ws_pos.y - delta.y) - (float(y0)) * ws_grid_interval) * one_over_ws_interval;
        uint y1 = min(y0 + 1, grid_dim - 1);

        uint z0 = min(uint(floor(ws_pos.z - delta.z * one_over_ws_interval)), grid_dim - 1);
        float tz = ((ws_pos.z - delta.z) - (float(z0)) * ws_grid_interval) * one_over_ws_interval;
        uint z1 = min(z0 + 1, grid_dim - 1);

        float sx = 1.0 - tx;
        float sy = 1.0 - ty;
        float sz = 1.0 - tz;

        float d0 = sx * sy * sz;
        float d1 = tx * sy * sz;
        float d2 = sx * sy * tz;
        float d3 = tx * sy * tz;

        float d4 = sx * ty * sz;
        float d5 = tx * ty * sz;
        float d6 = sx * ty * tz;
        float d7 = tx * ty * tz;

        vec3 ws_vel = GetWorldSpaceVelocity(component, velocity);
        SetVelocityIn3DGridCell(ivec3(x0, y0, z0), ws_vel * d0, component);
        SetVelocityIn3DGridCell(ivec3(x1, y0, z0), ws_vel * d1, component);
        SetVelocityIn3DGridCell(ivec3(x0, y0, z1), ws_vel * d2, component);
        SetVelocityIn3DGridCell(ivec3(x1, y0, z1), ws_vel * d3, component);

        SetVelocityIn3DGridCell(ivec3(x0, y1, z0), ws_vel * d4, component);
        SetVelocityIn3DGridCell(ivec3(x1, y1, z0), ws_vel * d5, component);
        SetVelocityIn3DGridCell(ivec3(x0, y1, z1), ws_vel * d6, component);
        SetVelocityIn3DGridCell(ivec3(x1, y1, z1), ws_vel * d7, component);
    }

    // Handle solid cell type
}
